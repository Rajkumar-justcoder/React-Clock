{"version":3,"sources":["Clock.js","App.js","reportWebVitals.js","index.js"],"names":["Clock","nhour","hour","Date","getMinutes","min","ndate","toLocaleDateString","sec","getSeconds","useState","chour","setstate","cdate","setdate","csec","setsec","cmin","setmin","setInterval","getHours","console","log","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAGe,SAASA,IAGtB,IAIIC,EAJAC,GAAO,IAAIC,MAAOC,aAClBC,GAAM,IAAIF,MAAOC,aACjBE,GAAQ,IAAIH,MAAOI,qBACnBC,GAAM,IAAIL,MAAOM,aAGrB,EAA0BC,mBAAST,GAAnC,mBAAOU,EAAP,KAAcC,EAAd,KACA,EAAyBF,mBAASJ,GAAlC,mBAAOO,EAAP,KAAcC,EAAd,KACA,EAAuBJ,mBAASF,GAAhC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAAuBN,mBAASL,GAAhC,mBAAOY,EAAP,KAAaC,EAAb,KAwBE,OADEC,aArBc,WAMC,KADbjB,GAAO,IAAIC,MAAOiB,cAEhBnB,EAAQ,IACLC,EAAO,KACVD,GAAgB,IAElBW,EAASX,GACTC,GAAO,IAAIC,MAAOiB,WAElBC,QAAQC,IAAIrB,GACZiB,EAAOb,GACPC,GAAQ,IAAIH,MAAOI,qBACnBO,EAAQR,GACRE,GAAM,IAAIL,MAAOM,aACjBO,EAAOR,KAEW,KAElB,qBAAKe,UAAU,YAAf,SACA,sBAAKA,UAAU,QAAf,UACE,sBAAKA,UAAU,aAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBZ,EAAvB,MAAiCM,EAAjC,QACA,qBAAKM,UAAU,MAAf,SAAsBR,OAExB,qBAAKQ,UAAU,OAAf,SAAuBV,SCnClBW,MANf,WACE,OACE,cAACxB,EAAD,KCKWyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.919e642f.chunk.js","sourcesContent":["import { useState } from \"react\";\n\n\nexport default function Clock() \n{\n\n  let hour = new Date().getMinutes();\n  let min = new Date().getMinutes();\n  let ndate = new Date().toLocaleDateString();\n  let sec = new Date().getSeconds();\n  let nhour;\n  \n  const [chour, setstate] = useState(nhour)\n  const [cdate, setdate] = useState(ndate)\n  const [csec, setsec] = useState(sec)\n  const [cmin, setmin] = useState(min)\n\n      const clockj= ()=> \n      {\n\n      \n      \n        hour = new Date().getHours();\n        if (hour === 0) {\n          nhour = 12;\n        }if (hour > 12) {\n          nhour = nhour - 12;\n        }\n        setstate(nhour);\n        hour = new Date().getHours();\n        \n        console.log(nhour)\n        setmin(min);\n        ndate = new Date().toLocaleDateString();\n        setdate(ndate);\n        sec = new Date().getSeconds();\n        setsec(sec);\n      }\n      setInterval(clockj, 1000);\n    return(\n        <div className=\"container\" >\n        <div className=\"clock\" >\n          <div className=\"first-half\">\n            <div className=\"time\">{chour} : {cmin} :</div>\n            <div className=\"sec\">{csec}</div>\n          </div>\n          <div className=\"date\">{cdate}</div>\n        </div>\n      </div>\n\n    )\n}\n","\nimport './App.css';\n\nimport Clock from './Clock.js';\n\nfunction App() {\n  return (\n    <Clock />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}